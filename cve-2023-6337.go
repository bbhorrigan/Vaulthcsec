package main

import (
	"fmt"
	"net/http"
)

// MaxRequestSize defines the maximum size of a request in bytes
const MaxRequestSize = 1048576 // 1MB for example

// RateLimiterMiddleware is an HTTP middleware function for rate limiting based on request size
func RateLimiterMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Check if the content length exceeds our maximum size
		if r.ContentLength > MaxRequestSize {
			http.Error(w, "Request too large", http.StatusRequestEntityTooLarge)
			return
		}

		// Call the next handler if request size is within the limit
		next.ServeHTTP(w, r)
	})
}

func main() {
	// Example handler that represents your Vault service
	vaultHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "Vault processing request")
	})

	// Wrap the vaultHandler with the RateLimiterMiddleware
	http.Handle("/", RateLimiterMiddleware(vaultHandler))

	// Start the HTTP server
	fmt.Println("Server is running on port 8080")
	http.ListenAndServe(":8080", nil)
}
